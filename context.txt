Institution: The Excelsior School
Location: Swoyambhu, Kathmandu, Nepal

1. Institutional Foundation: Context for Science Teaching at The Excelsior School
1.1 Overview of The Excelsior School
The Excelsior School, situated in the historic and culturally vibrant area of Swoyambhu, Kathmandu, is a forward-thinking educational institution dedicated to fostering academic excellence, personal development, and an engaging learning environment. As a science teacher, you are a cornerstone of this mission, tasked with igniting students’ curiosity, cultivating critical thinking, and facilitating hands-on exploration of scientific principles. The school’s commitment to innovation and student-centered education aligns seamlessly with your role, providing a supportive framework to integrate practical, real-world science into your classroom.
1.2 Leadership Structure and Their Relevance to Your Role
The leadership team at The Excelsior School shapes the institution’s vision and operations, directly influencing your teaching environment and resources:  
Chairperson: Madam Sheetal Rana  
Role: Serves as the Chairperson, overseeing the school’s strategic direction and long-term vision.  

Responsibilities: Ensures the school provides an environment conducive to both academic rigor and personal growth, setting the tone for educational excellence.  

Focus: Emphasizes inclusivity, innovation, and a student-centered approach, fostering a culture where every learner thrives.  

Impact on You: Madam Sheetal’s leadership encourages you to design science lessons that are creative and accessible to all students. For example, her inclusivity focus might inspire you to adapt a chemistry experiment with visual aids for students with different learning styles, while her push for innovation could lead you to incorporate digital simulations of planetary motion.  

Philosophy: Passionate about empowering educators and students, she views you as a key driver in unlocking student potential, expecting your science lessons to spark curiosity and prepare students for future challenges.

Managing Director: Sir Ram Basnet  
Role: Acts as the Managing Director, overseeing the day-to-day operations of the school to ensure smooth and efficient functioning.  

Responsibilities: Streamlines processes, optimizes resources, and maintains high standards of quality across academic and administrative domains.  

Focus: Supports staff development, fosters a positive learning environment, and builds strong relationships with students and parents.  

Impact on You: Sir Ram ensures you have access to essential science resources—such as lab equipment (e.g., Bunsen burners, microscopes), chemicals, or digital tools—and opportunities for professional growth, like workshops on lab safety or inquiry-based teaching. If you request additional materials for a physics demonstration, his resource management ensures these are prioritized.  

Philosophy: Dedicated to operational excellence, he expects you to maintain high standards in classroom management (e.g., organized lab stations) and leverage available resources effectively to enhance science education.

Principal: Sir Prashant Rajak  
Role: Serves as the Principal, leading both the academic and administrative functions of the school.  

Responsibilities: Works closely with teachers, staff, and students to create a dynamic and inclusive school culture, ensuring quality education for all.  

Focus: Promotes a holistic learning environment that balances academic rigor with personal growth.  

Impact on You: Sir Prashant is your direct collaborator, offering guidance on implementing the science curriculum effectively. For instance, he might suggest integrating real-world topics like renewable energy into your lessons or provide feedback on a biology unit plan to ensure it meets student needs.  

Philosophy: Believes in fostering a thriving educational community, expecting you to create a science classroom where students excel academically and develop as individuals, preparing them for both exams and life beyond school.

Details of XLCRSCI-ArchGPT 1.0:  
Developed by Head of Science Department (2022–2025): Rajat Thapa  
Purpose: Serves as a handy tool for lesson planning, answering student questions, or exploring departmental topics, using preloaded data and Google’s Gemini API for accurate, easy-to-read responses.  

Design: Features a simple, familiar interface, hosted online, and secured with a department-specific passkey and an API key to ensure exclusivity and security.  

Examples of Use: You could use it to quickly generate a demonstration script for teaching gravitational force, draft multiple-choice questions on photosynthesis, or find supplementary resources for a genetics lesson.

Impact on You: Rajat Thapa’s innovation provides you with a time-saving resource to enhance your teaching efficiency and engagement. His leadership encourages you to embrace technology as a partner in delivering dynamic science education.  

Vision: Aims to boost efficiency and engagement for the department’s educators and staff, aligning with the school’s broader goals of innovation and excellence.

2. Science Department Framework: Guiding Your Teaching Philosophy and Tools
2.1 Science Core Principles
The Department of Science at The Excelsior School outlines its ethos and approach through mission and vision statements and guiding principles encapsulated by the acronym S.C.I.E.N.C.E., providing you with a clear framework for your teaching:  
Vision: To create a learning environment where science is not just learned but lived, sparking curiosity about its marvels, practical applications, and integration into everyday life.  
Implication for You: This vision encourages you to move beyond textbook teaching, bringing science to life. For example, a lesson on electricity might involve students calculating the power usage of classroom appliances, connecting theory to their daily experiences.

Mission: To equip students with dynamic and innovative teaching approaches, nurturing independence, fostering personal growth, and igniting a deep enthusiasm for science.  
Implication for You: Your mission is to foster student autonomy—perhaps by guiding them to design their own experiments (e.g., testing plant growth variables)—and inspire a lifelong passion for discovery, such as marveling at the chemistry of fireworks.

Guiding Principles (S.C.I.E.N.C.E.):  
Student-Centered Learning: Prioritize hands-on learning, curiosity, and student-led inquiry, adapting teaching methods to diverse needs and interests. Design engaging, hands-on, and minds-on activities with real-life applications.  
Example: Teach circuits by having students build simple models with wires and bulbs, adjusting complexity for beginners versus advanced learners.

Curiosity and Critical Thinking: Encourage a culture where questions are valued. Develop students’ abilities to think critically and creatively using scientific methods to inquire, explore, hypothesize, experiment, and reflect. Aim to ignite natural curiosity and equip students for inquiry-based learning.  
Example: Pose a question like, “Why do some objects float?” and let students hypothesize, test with materials, and discuss findings.

Integrity and Inclusivity: Maintain high standards of integrity, promoting honesty, respect, and responsibility. Ensure science education is inclusive, providing equal opportunities for all students regardless of background or ability.  
Example: Ensure every student participates in a dissection lab, offering support to those hesitant about biology.

Engagement through Diverse Methods: Employ a variety of teaching strategies, including interactive lectures, discussions, digital technology, and field trips. Cater to different learning styles using problem-based learning, project-based learning, and flipped classrooms. Focus on clear, concise, and accessible content while encouraging movement, play, and creativity.  
Example: Use a video on tectonic plates, followed by a group discussion and a model-building activity with clay.

Nurturing through Collaboration: Foster a supportive environment where student collaboration is encouraged for peer learning, teamwork, and communication through group projects and cooperative learning.  
Example: Assign students to collaboratively design a model solar system, sharing roles like researcher and builder.

Connections beyond the Classroom: Extend learning by connecting scientific concepts to the real world, other subjects, and current global issues. Encourage applying knowledge in practical contexts to enhance problem-solving skills.  
Example: Link a chemistry lesson on acids to local water pollution, analyzing pH levels in nearby streams.

Evolution and Reflection: Commit to continuous improvement and lifelong learning for both students and educators through ongoing assessment, reflective practices, and openness to new ideas and technologies to offer the most effective science education.  
Example: After a lesson on energy, reflect on its success (e.g., “Did the demo engage them?”) and tweak it with a new simulation next time.

2.2 Technological Support: XLCRSCI-ArchGPT 1.0
Purpose: A chat application crafted for teachers and members of the Science Department at The Excelsior School to provide basic assistance with science-related queries.  

Features:  
Utilizes preloaded data and Google’s Gemini API for accurate, easy-to-read responses, ensuring reliability and clarity.  

Designed with a simple, familiar interface, making it intuitive for daily use, hosted online for accessibility, and secured with a department-specific passkey and an API key to protect sensitive information and restrict access to authorized users.  

Practical Applications for You:  
Lesson Planning: Generate a step-by-step guide for a magnetism demo in minutes.  

Student Questions: Quickly find an explanation for “Why does the moon change shape?” during class.  

Departmental Topics: Access resources for a staff meeting discussion on integrating STEM projects.

Developer: Rajat Thapa, the Head of the Science Department from 2022 to 2025, who created this tool to boost efficiency and engagement for the department’s educators and staff.  

Impact on You: This tool streamlines your workflow, allowing you to focus on teaching while enhancing lesson creativity and responsiveness to student inquiries, aligning with the department’s innovative ethos.

3. Zero Hour Plan Framework: Building the Foundation for Your Science Classroom
3.1 Preface: Purpose and Rationale
The Zero Hour Plan is designed to set the stage for an effective academic year, a critical framework for you as a science teacher to establish a classroom conducive to hands-on, inquiry-based learning. It focuses on:  
Building a vibrant classroom culture where students feel safe to ask questions and experiment.  

Setting clear expectations for behavior and academic engagement, essential for managing lab activities and fostering scientific rigor.  

Fostering student engagement from the start, ensuring they are excited about science through interactive and meaningful experiences.  

Your Role: This plan helps you create an environment where students feel responsible for their learning, collaborate effectively in lab groups, and develop intellectual curiosity about the natural world, ensuring a smooth transition into the science curriculum.

3.2 General Framework for All Grades
Day 1: Establishing a Purposeful Classroom Environment
Activity 1: Classroom Management & Orientation  
Warm Welcome & Relationship Building: Greet students individually as they enter, perhaps with a handshake or a cheerful “Welcome to science!” Use icebreakers like “What’s your favorite holiday memory?” or “What’s one science mystery you’d love to solve?” to build trust and set a positive tone.  

Classroom Expectations: Collaboratively create a behavior contract with students (e.g., “We will clean up after experiments” or “We will listen to each other’s ideas”), discuss classroom norms in detail (e.g., raising hands, lab safety), and display them prominently—perhaps on a colorful poster near the lab benches or classroom door.  

Self-Regulation Strategies: Implement restorative practices for conflict resolution, such as reflective discussions (e.g., “How could we have shared the microscope better?”), teaching students to manage disputes calmly, a skill vital for group lab work.  

Schoolwide Protocols: Discuss rules for communal areas (e.g., no running in hallways, respectful use of the cafeteria), and practice respectful conflict navigation through role-plays (e.g., acting out a scenario where two students disagree over lab results, then resolve it).

Activity 2: Introduction & Icebreaker Activities  
Grade-Specific Activities:  
Grades 4-6: Pandora’s Box – Pass a box with prompts (e.g., “What makes rainbows?” or “Why do birds fly?”) around the class, encouraging students to share fun insights and spark scientific curiosity as they get to know each other.  

Grades 7-8: Superhero Team Creation – Students design and present a superhero team based on their strengths (e.g., “I’m great at measuring things” becomes a precision-based hero), linking personal skills to scientific teamwork and observation.  

Grades 9-10: Movie Poster – Students create a “life-as-movie” poster for self-expression (e.g., “My Adventure with Biology”), connecting their interests to science and encouraging creative thinking about the subject.

Activity 3: Goal Setting & Accountability  
SMART Goal Framework:  
Grade 10: Set personal and academic goals using SMART criteria (Specific, Measurable, Achievable, Relevant, Time-bound), e.g., “I will learn to identify 10 chemical reactions by December, testing myself weekly.”  

Grades 7-9: Self-reflection to identify growth areas (e.g., “I want to get better at writing lab conclusions”), perhaps through a journal entry or small-group discussion.  

Grades 4-6: Set collective classroom goals (e.g., “We’ll build a model volcano as a team by November”), fostering a sense of shared purpose.

Activity 4: Moral Education Through Storytelling  
Story-Based Discussions: Read stories with moral themes like empathy or integrity (e.g., a tale about a scientist who admits a mistake in data), then role-play alternative endings (e.g., “What if they hid the error?”) to explore conflict resolution and ethics in science.

Activity 5: Classroom Rules and Regulations  
Student-Created Norms: Brainstorm classroom norms together (e.g., “We’ll wear goggles during experiments” or “We’ll take turns with equipment”), create a visual display (e.g., a chart with drawings), and formalize commitment.  

Behavior Agreements: Students sign a behavior contract to uphold standards (e.g., “I agree to follow lab safety rules”), reinforcing accountability and ownership of the classroom environment.

Day 2: Building a Collaborative Learning Community
Activity 1: Behavior Reinforcement & Positive Discipline  
Review Classroom Agreements: Reaffirm behavior norms and the contract by asking students to recall key points (e.g., “Who remembers why we clean our stations?”), ensuring consistency.  

Restorative Circles: Conduct brief, student-centered discussions (e.g., 5-10 minutes) to address minor conflicts (e.g., “Someone didn’t share the materials”) or celebrate successes (e.g., “Our group finished early!”), building a supportive community.  

Personal Growth Plans: Students create plans to improve specific skills (e.g., “I’ll work on patience by waiting my turn in lab”), tying personal development to collaborative science tasks.

Activity 2: Team-Building Challenges  
Structured Group Tasks:  
Grades 4-6: Rubber-Thread Tower – Students use rubber bands and thread to build a tower, practicing problem-solving and patience (e.g., “How do we keep it from tipping?”), skills essential for lab work.  

Grades 7-8: Blindfold Driving Game – One student directs a blindfolded partner through an obstacle course, building trust and leadership, mirroring the coordination needed in experiments.  

Grades 9-10: Business Pitch Simulation – Students pitch a science-based product (e.g., a water purifier), developing public speaking and persuasion skills useful for presenting lab findings.

Peer Feedback: Post-activity, students reflect in groups (e.g., “You were great at organizing us”) and offer constructive feedback (e.g., “Maybe next time we can plan faster”), enhancing teamwork and reflection.

Days 3 & 4: Core Subject Integration & Study Skills
Science Subject-Specific Engagement:  
Welcoming/Introduction: Begin with a warm greeting and a science-themed icebreaker (e.g., “Guess this element: It’s in water and you breathe it!”—oxygen), setting an enthusiastic tone.  

Mission, Vision, and Principles of Science: Share the department’s ethos (e.g., “We explore science to understand our world”), linking it to daily lessons (e.g., “Today’s experiment reflects our curiosity principle”).  

Student and Teacher’s Expectation: Outline mutual goals (e.g., “I expect you to hypothesize; you can expect me to explain results”), fostering a partnership in learning.  

Classroom and Lab Rules: Detail safety and conduct rules (e.g., “No eating in the lab,” “Wear goggles during reactions”), display them prominently, and explain their importance (e.g., “This keeps us safe”).  

Course Breakdown Termwise: Provide a term-wise plan (e.g., Term 1: Physics – Motion; Term 2: Chemistry – Reactions; Term 3: Biology – Ecosystems) with a specification grid detailing full marks, time, question types, quantities, and marking schemes.  

Specification Grid: Share specifics (e.g., “Term 1 exam: 75 marks, 3 hours, 10 MCQs, 5 short answers”), ensuring transparency.  

Internal Evaluation: Explain components (e.g., “Lab work is 20 marks, projects 16 marks”) and how they contribute to grades.  

Answer Writing Format: Teach structure (e.g., “Start with observations, then conclusions”), providing examples (e.g., “The solution turned blue because…”).  

Resources and Materials Management: Introduce tools—textbooks (e.g., “Science Explorer, pages 10-50”), notebooks for lab notes, Google Classroom for assignments, and the Veda app for interactive quizzes and videos.

Study Skills Development:  
Introduce time management (e.g., “Spend 15 minutes nightly reviewing formulas”), note-taking (e.g., “Use bullet points for key terms like ‘photosynthesis’”), and goal-oriented study habits (e.g., “Aim to master three concepts weekly”), tailoring strategies to each grade’s needs (e.g., simpler for Grade 4, detailed for Grade 10).

3.3 Advanced Section: Grades 7 & 8
Advanced Behavioral Strategies for Adolescents:  
Growth Mindset: Use weekly self-reflection (e.g., “What challenge did I overcome in lab this week?”) and Mistake Journals (e.g., “I mismeasured the solution, but learned to double-check”) to help students learn from setbacks, fostering resilience in science.  

Restorative Practice Circles: Hold daily 10-minute check-ins where students voice concerns (e.g., “The group project was confusing”) or celebrate successes (e.g., “We balanced the equation!”), building emotional awareness and community.  

Leadership Development: Encourage independent project-based learning (e.g., designing a wind turbine model) and student-led workshops (e.g., teaching peers about static electricity), developing initiative and confidence.

Social-Emotional Learning (SEL):  
SEL Curriculum: Teach stress management (e.g., deep breathing before a test), self-regulation (e.g., staying calm during a failed experiment), and healthy relationships (e.g., resolving disagreements over lab roles), integrating these into science lessons.  

Peer Mediation: Train select students as peer mediators to resolve conflicts (e.g., “Who gets the last beaker?”), equipping them with skills to support group dynamics in lab settings.

3.4 Conclusion
The Zero Hour Plan is designed to create an intentional, structured environment that fosters respect, collaboration, and accountability. For you as a science teacher, it ensures students are primed for hands-on exploration, adhere to lab safety protocols, and embrace scientific inquiry, setting the stage for a year of growth, discovery, and achievement in your classroom.  
4. Lesson Planning Frameworks: Tools to Enhance Your Science Teaching
4.1 BELT Lesson Plan Quick Check
The BELT framework is a quick tool designed for teachers at The Excelsior School to assess the effectiveness of their lesson plans and delivery in real-time. It is based on four key questions represented by the acronym BELT: Boredom, Engagement, Learning, and Time. As a science teacher, you’re encouraged to periodically pause during planning and lesson delivery to ask yourself these questions, ensuring dynamic, effective science instruction.  
Components:  
B - Boredom:  
Focus: This aspect focuses on identifying if the classroom environment is becoming monotonous for students, a common challenge in science if lectures dominate over labs.  

Indicators: Teachers should look for signs of disengagement such as fidgeting (e.g., tapping pencils during a long explanation of mitosis), whispering (e.g., chatting instead of listening to a physics formula), or off-task behavior (e.g., doodling instead of observing a demo).  

Considerations: It’s important to consider if the pace of the lesson is appropriate (e.g., too slow during a chemistry explanation) and if the activities are varied (e.g., all theory, no hands-on).  

Action: If the answer to whether the classroom is getting boring is "yes," consider adjusting the lesson pace (e.g., speeding up a lecture), introducing a new activity (e.g., a quick pH test with litmus paper), or using a short energizer to refocus students (e.g., “Stand and name a gas!”).

E - Engagement:  
Focus: This element assesses whether students are actively involved in the lesson, crucial for science’s interactive nature.  

Indicators: Teachers should observe if students are actively participating in discussions, activities, or tasks (e.g., debating a hypothesis about plant growth), or if they’re asking questions or offering explanations (e.g., “Why did the balloon inflate?”).  

Action: If engagement is low, think about incorporating more interactive elements (e.g., a mini-experiment with magnets), clarifying instructions (e.g., “Here’s exactly how to measure the liquid”), or checking for understanding (e.g., “Who can explain this step?”).

L - Learning:  
Focus: This component evaluates whether students are acquiring knowledge and skills as intended by the lesson, the core of science education.  

Indicators: Teachers need to consider if students are meeting the learning outcomes of the lesson (e.g., explaining osmosis post-lab), evidenced by their ability to demonstrate understanding through activities or assessments (e.g., drawing a cell membrane).  

Action: If learning is a concern, consider revisiting key points (e.g., re-explaining atomic structure), providing additional practice (e.g., a worksheet on balancing equations), or adjusting the difficulty level (e.g., simplifying a physics problem).

T - Time:  
Focus: This aspect focuses on the efficient use of instructional time, vital for fitting labs and discussions into class periods.  

Indicators: Teachers should be mindful of whether activities are taking longer than expected (e.g., a dissection running over) or if adjustments can be made to ensure efficient use of time (e.g., shortening a lecture).  

Action: If the answer to whether time is being wasted is "yes," consider adjusting the lesson pace (e.g., speeding up a demo), introducing a new activity (e.g., a quick quiz), or using a short energizer to refocus students (e.g., “Count to 10 as a class!”).

Benefits:  
It allows teachers to adapt their lesson on the fly to improve student engagement and learning (e.g., switching to a hands-on task if a lecture flops).  

It promotes a more responsive teaching style, aligning with science’s need for flexibility in experiments and discussions.

Important Reminders:  
There is no set frequency for checking BELT; teachers should do it intuitively as they see fit (e.g., mid-lesson or when energy dips).  

BELT is a tool, not a rigid script, and teachers should use their professional judgment to adjust and personalize it for their specific teaching style and students (e.g., emphasizing engagement during a lab-heavy day).

4.2 Understanding the 5E Lesson Plan Used in The Excelsior School and Its Application in Teaching
The 5E Model is a structured approach to lesson planning designed to promote inquiry-based, student-centered learning, developed by BSCS (Biological Sciences Curriculum Study). This model consists of five phases: Engage, Explore, Explain, Elaborate, and Evaluate, each serving a specific purpose in facilitating conceptual understanding and active learning in your science classroom.  
Phases of the 5E Lesson Plan:  
Engage  
Purpose: Capture students’ interest and assess prior knowledge, setting the stage for curiosity-driven science exploration.  

Description: This phase is designed to stimulate curiosity and prepare students mentally for the lesson, acting as a hook to draw them into the topic.  

Methods: Teachers can use real-life scenarios (e.g., “How do planes fly?”), thought-provoking questions (e.g., “Why does ice float on water?”), videos (e.g., a clip of a volcanic eruption), or short activities (e.g., a quick static electricity demo with a balloon).  

Examples in Science Class:  
Showing a burning candle to introduce the concept of chemical reactions, asking, “What’s happening to the wax?”  

Asking, "Why does ice float on water?" to trigger curiosity about density, prompting initial guesses.  

Using a short simulation or experiment without explanation (e.g., dropping objects of different weights) to encourage inquiry.

Explore  
Purpose: Allow students to investigate and interact with the concept hands-on, building foundational observations before formal teaching.  

Description: Students participate in activities, collect data, and discuss findings, with you facilitating rather than lecturing.  

Methods: Hands-on tasks like mixing substances, observing phenomena, or testing variables (e.g., light intensity on plant growth).  

Examples:  
Conducting a vinegar and baking soda reaction to explore gas production and chemical changes, noting bubbles and temperature shifts.  

Using magnets to observe attraction and repulsion before explaining magnetic fields, letting students record patterns.  

Observing plant growth in different conditions (e.g., light vs. dark) before discussing photosynthesis, encouraging hypotheses.

Explain  
Purpose: Provide formal instruction and clarify concepts, connecting student observations to scientific principles.  

Description: Students share their findings, and you introduce key terms, definitions, and structured explanations to solidify understanding.  

Strategies:  
Guided discussions based on students’ findings (e.g., “What did you notice about the gas?”).  

Using diagrams, models, and multimedia for clarity (e.g., a pH scale chart or atomic model video).  

Relating the new concept to students’ prior knowledge (e.g., linking static electricity to lightning).

Examples:  
After an experiment with acids and bases, explaining the pH scale and indicators like litmus paper, defining terms like “neutralization.”  

Using a model of the atom to explain subatomic particles after students explore static electricity with balloons and wool.

Elaborate  
Purpose: Deepen understanding by applying concepts in new situations, enhancing critical thinking and real-world relevance.  

Description: This phase builds on prior learning, encouraging problem-solving and interdisciplinary connections.  

Activities:  
Project-based learning: Students design a water filtration system after learning about water purification, testing its effectiveness.  

Real-life applications: Applying Newton’s Laws to sports (e.g., kicking a ball), vehicle safety (e.g., seat belts), or space exploration (e.g., rocket thrust).  

Cross-disciplinary connections: Linking science to math (e.g., calculating circuit resistance), technology (e.g., coding a simulation), or history (e.g., discoveries like gravity).

Examples:  
After learning about electric circuits, students design a home lighting system, wiring a model house.  

After exploring ecosystems, students analyze local environmental issues (e.g., deforestation in Nepal) and propose solutions like reforestation plans.

Evaluate  
Purpose: Assess understanding and learning outcomes, ensuring mastery of science concepts.  

Description: Teachers use formative and summative assessments to check comprehension, which can be informal or formal.  

Methods:  
Concept maps to visualize understanding (e.g., mapping the water cycle).  

Exit tickets where students answer a key question before leaving class (e.g., “What’s one thing you learned about energy?”).  

Performance-based assessments, such as designing a science experiment (e.g., testing soil pH).

Examples:  
For Physics: Students create a working model of a simple machine (e.g., a lever) and explain its mechanics.  

For Chemistry: Students write a lab report explaining the reaction observed (e.g., copper sulfate and iron).  

For Biology: Students analyze real-world food chains (e.g., in a local forest) and present findings.

How to Use the 5E Model in Lesson Planning:  
Align the Lesson with Learning Objectives:  
Identify key concepts (e.g., “Understand chemical bonding”) and skills (e.g., “Measure reaction rates”) students need to acquire.  

Ensure each phase helps achieve these objectives (e.g., Explore tests hypotheses, Explain defines bonds).

Integrate Inquiry-Based Learning:  
Encourage students to ask questions (e.g., “What if we add more heat?”) and make predictions (e.g., “I think it’ll react faster”).  

Let them investigate before providing direct explanations (e.g., test variables first).

Use Differentiated Instruction:  
Modify activities for diverse learning styles (e.g., visual learners draw molecules, kinesthetic learners build models).  

Provide scaffolding for students needing support (e.g., step-by-step lab guides).

Foster Active Participation:  
Use technology (e.g., virtual labs), hands-on activities (e.g., dissections), and real-world applications (e.g., local weather data).  

Promote collaboration and peer discussions (e.g., “Compare your results with your partner”).

Continuously Assess and Reflect:  
Use formative assessments throughout (e.g., quick quizzes mid-lesson).  

Adjust instruction based on responses (e.g., reteach if half the class misunderstands).

Conclusion:
The 5E Lesson Plan is a powerful tool that transforms traditional science teaching into an engaging, student-centered experience. By actively involving learners in each phase, it promotes deep understanding, critical thinking, and retention of knowledge. When properly implemented, this model fosters inquiry, exploration, and application, making science learning more meaningful and effective for your students.

5. Teacher Competencies: Standards for Excellence in Science Teaching
5.1 Teacher Competency Framework 2072
The Teacher Competency Framework 2072 outlines essential competencies expected of you as a science teacher at The Excelsior School, encompassing various aspects of your professional practice. These competencies are described with specific indicators to guide your performance:  
Content Knowledge:  
Definition: This competency involves having in-depth knowledge of the subject you teach—science—to address students’ learning needs effectively.  

Indicators:  
In-depth and up-to-date knowledge in related subjects (e.g., current research on climate change or quantum physics).  

Information about concepts, principles, and interrelationships of related subjects (e.g., how physics principles like force relate to biology’s muscle movement).  

Information on the overall aspect, including the structure of the curriculum of science to be taught (e.g., knowing the progression from Grade 4 ecosystems to Grade 10 genetics).  

Knowledge about its interrelationship with other subjects (e.g., math in calculating chemical molarity, history in scientific discoveries).  

Knowledge about the relevance of the subject matter to the local environment (e.g., linking geology to Kathmandu Valley’s tectonic activity).

Application: You might use this to explain how local air pollution ties to chemistry concepts like particulate matter, making lessons relevant.

Pedagogical Knowledge:  
Definition: This refers to having in-depth knowledge about the teaching and learning process and being able to use that knowledge suitably in teaching science.  

Indicators:  
Up-to-date knowledge on different teaching methods and latest teaching technology (e.g., flipped classrooms, virtual labs).  

The ability to determine the educational plan and strategy to achieve course objectives and competencies (e.g., a three-week plan for mastering Newton’s Laws).  

The ability to choose the appropriate teaching method considering the subject matter (e.g., demos for chemistry), students’ level (e.g., simpler for Grade 4), and individual differences (e.g., extra visuals for visual learners).  

The ability to facilitate learning by using appropriate teaching methods and materials for active learning (e.g., hands-on pendulum experiments).  

The ability to evaluate various aspects of learning using appropriate tools (e.g., rubrics for lab reports), analyze results, and use them (e.g., adjust lessons based on quiz scores).  

The ability to ensure learning and conduct remedial teaching as needed through continuous evaluation (e.g., reteach photosynthesis if half the class struggles).

Application: You might use a mix of lectures, labs, and discussions to teach energy, assessing progress with quick checks and adapting as needed.

Knowledge about Children/Learners:  
Definition: This competency focuses on the ability to identify the diverse learning needs of children and teach accordingly, critical for a varied science classroom.  

Indicators:  
The ability to use knowledge about the physical, mental, social, and emotional development of children and its relationship with education (e.g., understanding adolescents need autonomy in experiments).  

The ability to establish a relationship with new learning by properly assessing prior knowledge (e.g., asking “What do you know about plants?” before photosynthesis).  

The ability to recognize and respect the linguistic and social, cultural values and diversity of learners (e.g., valuing Nepali terms students use for scientific phenomena).  

Recognizing that every child has the right to learn and can learn, expecting higher learning (e.g., believing all can master basic circuits).  

The ability to address the special learning needs and special abilities of children appropriately (e.g., extra time for a dyslexic student to read lab instructions).

Application: You might adjust a physics lesson on motion for a student with motor challenges by using simulations instead of physical models.

Learning Environment and Classroom Management:  
Definition: This competency involves being able to manage classrooms for effective teaching and learning while creating a child-friendly, supportive, and challenging learning environment, vital for science labs.  

Indicators:  
The ability to create a child-friendly learning environment by appropriately managing resources and facilities (e.g., organized lab stations with labeled tools) while considering the overall development of the school.  

The ability to organize groups as needed for creative learning opportunities (e.g., lab teams for a chemistry experiment).  

The ability to encourage exemplary behavior by maintaining cooperation and mutual understanding through positive discipline (e.g., praising students for following safety rules).  

The ability to provide other appropriate means and opportunities, including the use of the library and information technology (e.g., online research on ecosystems).  

The ability to guide students towards discovery and creation (e.g., letting them hypothesize in labs).  

The ability to continue learning by efficiently creating a suitable environment even in adverse situations (e.g., teaching outdoors if the lab is unavailable).

Application: You might set up a lab with clear safety zones and group students to explore magnetism, praising teamwork to reinforce norms.

Communication and Collaboration:  
Definition: This competency involves being able to communicate and collaborate effectively between students, parents, and teachers, enhancing science education’s reach.  

Indicators:  
The ability to communicate effectively for inquiry, collaboration, and engagement (e.g., asking “What do you think will happen?”).  

The ability to motivate students to learn, clarify subject matter, engage in guided activities, and provide academic advice (e.g., “Try this method for better results”).  

The ability to share experience, expertise, mutual support, and collaboration among colleagues to promote professional development and student participation (e.g., sharing a successful lab with peers).  

The ability to discuss and consult with parents for support and recording of achievements and other subjects (e.g., explaining a student’s lab progress at a meeting).

Application: You might encourage a shy student to present findings or discuss a project’s impact with parents to gain their support.

Continuous Learning and Professional Development:  
Definition: This competency reflects a commitment to continuous learning and professional development by analyzing existing knowledge, skills, and experience, crucial for staying current in science.  

Indicators:  
The desire to seek professional development opportunities and engage in continuous learning (e.g., attending a workshop on STEM teaching).  

The ability to be involved in continuous improvement through self-reflection (e.g., “Did my demo clarify the concept?”).  

The ability to keep informed about studies and research in your subject area (e.g., new biology findings) and carry out practical research to improve teaching and learning (e.g., testing a new lab method).  

Developing innovation and creativity through mutual support and collaboration (e.g., brainstorming with colleagues on a physics project).

Application: You might research a new climate model, test it in class, and refine it based on student feedback.

Legal Bases and Professional Conduct:  
Definition: This competency involves being capable of carrying out responsibilities by demonstrating ideal professional conduct in accordance with prevailing laws, regulations, and social values.  

Indicators:  
The ability to earn public trust by exhibiting respect and loyalty to the profession and demonstrating the highest ethical behavior (e.g., fair grading).  

The ability to take responsibility for actions and behavior by demonstrating ideal behavior according to laws and guidelines (e.g., adhering to safety regulations).  

The ability to demonstrate neutral and respectful behavior towards all children in line with professional codes and official dignity, committed to their best interests (e.g., encouraging all equally).  

The ability to demonstrate respect for social values and local culture (e.g., tying lessons to Nepali traditions) and tolerant behavior towards different opinions and beliefs.  

The ability to demonstrate appropriate behavior while being aware of global norms related to education (e.g., human rights, child rights, education as a fundamental right, education for all).

Application: You might ensure a lab is safe and inclusive, respecting students’ cultural perspectives on science topics.

Information and Communication Technology:  
Definition: This competency involves being able to use information and communication technology for effective teaching and learning, enhancing your science lessons.  

Indicators:  
The ability to select and use integrated learning strategies of information and communication technology to facilitate learning (e.g., virtual dissections).  

The ability to develop digital content suited to learners’ needs (e.g., a slideshow on ecosystems) and use available content adaptively (e.g., tweaking an online quiz).  

The ability to make effective mutual communication and collaboration to promote self-learning through IT tools (e.g., Google Classroom discussions).  

The ability to use IT for assessment and enrichment of learning (e.g., online tests or simulations).  

Being familiar with the policy related to IT in education and developments in digital culture to display appropriate professional behavior (e.g., knowing Nepal’s ICT education guidelines).

Application: You might use a virtual lab to teach atomic structure, assessing students via an online quiz tailored to their level.

6. Assessment & Evaluation: Measuring Student Progress in Science
6.1 Examination and Result Analysis
This document outlines the standards for you as a science teacher at The Excelsior School to evaluate your performance during terminal examinations, which are conducted on a quadrimester basis (three times yearly). The evaluation is based on the concept of the 3 A’s: Afore, Amid, and After the examination process.  
Stages:  
The examination process is divided into three stages: Afore (before), Amid (during), and After (after) the examination.

Parameters at Each Stage:  
Afore: Syllabus, Specification grid, Question paper and its answer key.  

Amid: Invigilation duty.  

After: Answer sheet correction, Report Card (Data entry and verification), Result analysis.

Standards for Teachers at Each Stage:  
Afore:  
Syllabus:  
Teachers must have an understanding of the syllabus and its usefulness to both teachers and students (e.g., knowing it guides lesson pacing).  

They should be able to create a comprehensible syllabus specific to a terminal exam (e.g., Term 1: Motion and Energy), mentioning details like the marking scheme (theory/practical) (e.g., 60 theory, 15 practical), study topics (e.g., Newton’s Laws), and textbooks/reference books with page numbers (e.g., “Science Explorer, pp. 20-40”).  

They are expected to teach the syllabus completely, ensuring no topic (e.g., friction) is skipped.

Specification Grid:  
Teachers need to understand the specification grid and be able to create a comprehensible one with details such as full marks (e.g., 75), time (e.g., 3 hours), question type (e.g., MCQs, short answers), question quantity (e.g., 10 MCQs, 5 short answers), and marking scheme (e.g., 1 mark per MCQ).  

This should be done a month prior to the examination to allow preparation time.

Question Paper and Its Key:  
Teachers must be able to prepare a question paper and its key while maintaining integrity (e.g., no leaks).  

They should create an original question paper that includes all learning levels (Bloom’s taxonomy)—recall (e.g., “Define velocity”), comprehension (e.g., “Explain inertia”), application (e.g., “Calculate speed”), analysis, synthesis, and evaluation—based on the syllabus and specification grid created beforehand.  

References to pre-existing questions are allowed but without plagiarism (e.g., rewording a sample question).  

The question paper is to be created a month prior to the examination, giving time for review.  

Teachers must recheck and verify the question paper before submitting it for verification (e.g., ensuring no typos in a physics formula).  

Create an answer key that facilitates understanding the closeness of an answer to full marks (e.g., “Full marks for including formula, calculation, and unit”).  

They are prohibited from providing probable questions in any form to students, maintaining fairness.

Amid:  
Invigilation Duty:  
Teachers should understand the importance of invigilation duty (e.g., ensuring a fair exam) and perform it efficiently.  

This includes reaching the exam hall on time (e.g., 10 minutes early), maintaining strict invigilation (e.g., no wandering), reminding students about remaining time (e.g., “15 minutes left”), helping them understand questions (e.g., clarifying “velocity” without answering), distributing question papers, and checking and signing answer scripts and supplementary papers.  

Teachers should not engage in activities such as reading, conversations, leaving without a substitute, correcting answer scripts, or helping students with answers during invigilation.  

They are also responsible for the answer sheets before handing them over to the Examination department, ensuring no loss or tampering.

After:  
Answer Sheet Correction:  
Teachers must be able to correct answer sheets and tabulate marks appropriately using a red pen (e.g., circling errors) and without any bias (e.g., grading all equally).  

They need to submit the marks to the Examination department within 3 to 4 days (duration may vary depending on exam size) and not disclose the marks to students before result distribution, preserving confidentiality.  

They are also responsible for generating data such as average marks (e.g., 65/75), range of marks (e.g., 45-72), and the number of students below the passing mark (e.g., 5 below 30) from the corrections, aiding analysis.

Report Card:  
Teachers should know about report card preparation and be extremely careful and precise while tabulating the marks, rechecking the marks grid (e.g., ensuring 68 matches the script) and tallying it with the answer sheet before submission to avoid errors.

Result Analysis:  
Teachers are expected to analyze the results based on answer sheet sampling (e.g., reviewing 5 scripts), data generation (e.g., average scores), compare and contrast (e.g., Term 1 vs. Term 2), and reflections (e.g., “Many struggled with equations”).  

They should discuss the results with the Instructional Supervisor for useful takeaways (e.g., “Students need more practice”) and strategy design for the next term (e.g., extra physics drills).  

They should devise plans to prevent the recurrence of pitfalls from one terminal exam to the next (e.g., more lab time to boost practical scores).

6.2 XLCR Internal Evaluation Protocol
This document outlines the internal assessment protocol for the Department of Science & Technology at The Excelsior School, aiming to provide a comprehensive and effective means of evaluating student progress in your science classes. The criteria apply to the assessment of each chapter in the science courses.  
Internal Evaluation Marks Distribution:  
Basic Level (Class 4 & 5 and Class 6 – 8):  
Attendance and participation: 4 marks.  

Experimental work: 20 marks (material setup, observation, testing, tabulation, conclusion, presentation, documentation).  

Project work: 16 marks (site visit, chart making, model making, material making, inquiry, presentation, documentation).  

Quarterly Examination: 10 marks (question paper based on specification grid, feedback for improvement).  

Total: 50 marks.

Secondary Level (Class 9 & 10):  
Attendance and participation: 3 marks.  

Experimental work: 10 marks (material setup, observation, testing, tabulation, conclusion, presentation, documentation).  

Project work: 6 marks (site visit, chart making, model making, material making, inquiry, presentation, documentation).  

Quarterly Examination: 6 marks (question paper based on specification grid, feedback for improvement).  

Total: 25 marks.

Assessment Criteria (for Each Chapter):  
Project Work:  
Assesses the application of theoretical knowledge in practical, creative, and innovative ways through models, presentations, posters, etc.  

Uses an evaluation rubric similar to the one in "PWP.docx.pdf" with criteria like Creativity and Originality, Scientific Accuracy, Presentation and Clarity, and Timeliness (e.g., Excellent: 4 points, Good: 3 points).

Lab Practical:  
Evaluates proficiency in practical science skills and the ability to conduct experiments accurately and safely through hands-on experiments.  

Criteria include Performance & Safety (e.g., proper goggle use), Presentation (e.g., clear verbal explanation), and Documentation in Record File (e.g., neat tables), each with rating scales (e.g., 1-5).

Notebooks Maintenance:  
Assesses consistency and quality of classwork and homework based on regular entries, organization, neatness, and completeness.  

Criteria include Organization (e.g., dated entries), Completeness (e.g., all questions answered), Neatness (e.g., legible handwriting), and Timeliness (e.g., submitted on time), each with rating scales.

Chapter Assessment:  
Measures understanding of chapter content through written or computer-based Multiple Choice Questions (MCQs) (e.g., “What gas is produced in photosynthesis?”).

Classroom Presence:  
Encourages and recognizes regular attendance, active participation, and engagement.  

Criteria include Attendance (e.g., present 95% of the time), Participation (e.g., asking questions), and Engagement (e.g., focused during demos), each with rating scales.

Implementation:  
Assessments will be conducted at the end of each chapter or major unit (e.g., after “Chemical Reactions”).  

Subject teachers are responsible for administering and recording scores (e.g., you track lab marks).  

Regular audits will be done to ensure compliance (e.g., supervisor checks records).  

Feedback will be provided after each component, highlighting strengths (e.g., “Great hypothesis!”) and areas for improvement (e.g., “Add more detail to conclusions”).  

Records will be maintained digitally (e.g., in a school database).  

Marks will be converted as per the CDC (Curriculum Development Centre) framework.  

Teachers are not obligated to give additional marks to students who disregard the internal evaluation system (e.g., skipping labs).

6.3 Unit Learning Verification Tests (ULET)
This document outlines the Formative Evaluation Assessment Process, known as Unit Learning Evidence Test Protocol (ULET), implemented at The Excelsior School to continuously monitor and support student learning in your science classes.  
Process Overview:  
This process involves a more granular assessment schedule than traditional end-of-term testing, focusing on frequent, smaller evaluations.  

Frequent Assessments: Multiple assessments are given at the end of each chapter or unit (e.g., after “Motion”) to identify learning gaps early and ensure continuous engagement.  

Variety of Test Formats: Individual departments can use various assessment methods and test item formats suited to learning objectives and subject matter (e.g., quizzes, lab tasks, oral questions). Traditional unit tests can be conducted with coordination, informing students a week prior, with no more than two tests in a day. This allows for differentiated tasks catering to diverse learning styles (e.g., written for auditory learners, practical for kinesthetic).  

Comprehensive Feedback: All scores are compiled and analyzed, and students receive detailed, specific, and actionable feedback to guide learning strategies (e.g., “Focus on explaining your steps in calculations”).  

Accurate Record Keeping: Assessment results are thoroughly documented and stored for future reference (e.g., in a digital gradebook), allowing tracking of progress and informing instruction.

Prerequisites for Unit Tests:  
Completion of Chapter-Related Tasks and Correction: Successful completion of classwork, homework, worksheets, projects, labs, and field visits, along with teacher correction (e.g., reviewed lab reports), is required before testing.  

Demonstration of Key Skills: Students may need to show proficiency in relevant skills through activities or presentations (e.g., using a microscope correctly).  

Teacher Recommendation: Teachers can use professional judgment to assess class readiness (e.g., “They’ve grasped velocity concepts”).  

Timing: Test timings should align with National Curriculum guidelines (3 hours for 75 marks, 2 hours for 50 marks), with a maximum of 2.4 minutes per mark (e.g., 48 minutes for 20 marks).

Benefits:  
Early Identification of Learning Gaps: Timely intervention and support become possible (e.g., extra help on density before it compounds).  

Improved Student Understanding: Diverse formats encourage deeper understanding by catering to different styles (e.g., a lab task reinforces theory).  

Data-Driven Instruction: Feedback and records provide valuable data for future instruction (e.g., noting many struggle with stoichiometry).  

Enhanced Student Engagement: Frequent and differentiated assessments can increase motivation through regular feedback and self-evaluation (e.g., “I improved from last time!”).

7. Student Engagement: Projects and Activities in Science
7.1 Project Work Protocol
This document outlines the project work guidelines for students in Grades 1 to 10 across the three academic terms at The Excelsior School. The aim is to ensure project work enhances learning without causing undue pressure, with most work to be completed within school premises under supervision, directly involving you as a science teacher.  
Key Objectives:  
Enhance Learning: Aligning projects with learning outcomes and deepening understanding (e.g., a model volcano ties to chemical reactions).  

Reduce Pressure: Minimizing stress by keeping project work within the school (e.g., no late-night home crafting).  

Encourage Collaboration: Fostering collaboration among teachers to avoid overlap and balance workload (e.g., coordinating with the math teacher).  

Engage with Environmental Awareness: Ensuring each student participates in an Environment Day project in Term 1 (e.g., recycling exhibit).  

Provide Varied Project Types: Offering a mix of styles like model-making, reports, investigations, writing assignments (e.g., a biology report vs. a physics model).

General Guidelines:  
Project Assignment: Each term will have at least one major project per student, often aligning with key dates like Environment Day. Project types can include model-making (e.g., solar system), investigations (e.g., water purity), reports (e.g., climate change), miniature models (e.g., cell structure), articles (e.g., “Why Planets Orbit”), and presentations (e.g., explaining a project orally).  

Completion Location: Most project work should be done within school hours under teacher supervision (e.g., in class or lab time). Teachers should monitor progress and provide support in class (e.g., guiding model construction). Projects will be assigned as home assignments only when necessary (e.g., if materials are unavailable at school).  

Teacher Collaboration: Teachers must coordinate within grade levels to prevent project overlap (e.g., avoiding two science models at once) and ensure a balanced workload across subjects through horizontal collaboration (e.g., meeting with other Grade 7 teachers). Regular progress checks and feedback should be provided during class time (e.g., “Your model needs a stronger base”).

Roles & Responsibilities:  
Students: Engage meaningfully with the project and meet objectives under supervision (e.g., researching ecosystem roles).  

Subject Teachers: Design projects aligned with learning outcomes and rubrics (e.g., a rubric for a physics bridge), supervise in school, and collaborate with colleagues (e.g., sharing ideas with the chemistry teacher).  

Class Teachers: Coordinate project timelines across subjects (e.g., ensuring science and math projects don’t clash) and ensure balanced workload within the class.  

Instructional Supervisor: Oversee project guideline adherence and provide support for smooth execution (e.g., approving a field trip).  

Parents: Support students by encouraging completion in school and ensuring a balanced workload at home (e.g., not overhelping).

Mark Allocation for Project Work:  
Grades 1 to 3: 16 marks.  

Grades 4 to 8: 16 marks out of 50 for internal assessment.  

Grades 9 to 10: 6 marks out of 25 for internal assessment.

Evaluation Rubric Sample:  
Includes criteria like Creativity and Originality (e.g., unique design), Scientific Accuracy (e.g., correct physics principles), Presentation and Clarity (e.g., neat model and explanation), and Timeliness (e.g., submitted on deadline), with corresponding points for different levels of achievement (Excellent: 4, Good: 3, Satisfactory: 2, Needs Improvement: 1).

Important Notes:  
Mini Projects: Short writing assignments, articles, or booklets may also be conducted under classroom supervision (e.g., a one-page report on fossils).  

Supervision: Teachers must ensure adequate time and resources for project completion during school hours (e.g., providing clay for models).  

Grading and Feedback: Projects will be assessed on effort, creativity, understanding, and adherence to guidelines. Timely feedback will be provided (e.g., “Add labels to your model next time”).  

Communication: Regular communication should be maintained with supervisors and guardians regarding student performance, highlighting areas of excellence (e.g., “Great creativity!”) and shortcomings (e.g., “Needs more research”).

7.2 World Environment Day at The Excelsior School
What is World Environment Day?
World Environment Day (WED) is celebrated annually on June 5th to raise awareness and promote action for environmental protection. Organized by the United Nations, it has been observed since 1973 and is one of the largest global outreach programs addressing issues like pollution, climate change, and conservation. At The Excelsior School, Environment Day is celebrated with various hands-on activities, projects, and performances that engage students in environmental action, directly involving you in planning and supervising science-related tasks.  
Environment Day 2024
Theme: #GenerationRestoration  

Hosted by: The Kingdom of Saudi Arabia  

Focus: Land restoration, desertification, and drought resilience  

Objectives:  
Raise awareness about environmental conservation (e.g., why soil matters).  

Encourage students to develop solutions for pollution and desertification (e.g., restoration models).  

Promote hands-on learning through activities and exhibitions (e.g., building exhibits).

Major Activities (2024):  
Grade

Activity

Description

1

School Cleaning Drill

Students cleaned classrooms and school premises (e.g., picking up litter).

2

Sorting Biodegradable & Non-Biodegradable Items

Buried waste and observed decomposition over time (e.g., banana peels vs. plastic).

3

Making Paper Bags

Created eco-friendly shopping bags from newspapers, reducing plastic use.

4

Paper Recycling Exhibit

Turned waste paper into recycled paper and crafts (e.g., bookmarks).

5

Plastic to Fantastic

Converted plastic waste into useful and decorative items (e.g., planters).

6

Desertification & Restoration Exhibit

Created models showcasing land degradation and recovery (e.g., barren vs. green land).

7

Parents’ Day Performance

A theatrical performance highlighting environmental issues (e.g., a skit on drought).

8

Thread Art

Created art based on the Environment Day theme using colorful threads (e.g., a dry-to-lush landscape).

9

Swoyambhunath Stupa Cleaning

Cleaned a local heritage site to promote community responsibility, linking science to action.

Key Highlights (2024):  
Interactive Learning: Hands-on experiences such as waste sorting, recycling, and restoration models helped students grasp environmental concepts (e.g., decomposition rates).  

Community Engagement: The Swoyambhunath Stupa cleaning drive involved students in protecting their cultural heritage, showing science’s societal role.  

Art & Performance: Creative elements like thread art, music, and theatre performances reinforced environmental messages (e.g., a song about restoration).

Environment Day 2023
Theme: #BeatPlasticPollution  

Major Activities (2023):  
Grade

Activity

Description

1

School & Community Cleanliness

Cleaned school surroundings and nearby areas (e.g., picking up wrappers).

2

Biodegradable vs. Non-Biodegradable Sorting

Buried waste to study decomposition (e.g., paper vs. plastic bags).

3

Making Paper Bags

Created paper bags from old newspapers to replace plastic.

4

Paper Recycling

Produced recycled paper from waste materials (e.g., new sheets from scraps).

5

Plastic to Fantastic

Upcycled plastic waste into useful items (e.g., pencil holders).

6

National Park Models

Designed models of wildlife conservation areas (e.g., Chitwan National Park).

7

Stage Performances

Drama, music, and dance highlighting environmental themes (e.g., a dance on pollution).

8

Agamograph Art

Created dual-image artworks related to environmental conservation (e.g., clean vs. polluted river).

9

Swoyambhunath Stupa Cleaning

Conducted a cleanup drive at the heritage site, linking science to community service.

Key Highlights (2023):  
The #BeatPlasticPollution theme emphasized plastic waste reduction, with activities like upcycling reinforcing this focus.  

Students designed National Park models to learn about conservation, connecting biology to real-world issues.  

The event featured a mix of science, art, and community service to promote environmental awareness (e.g., sorting tied to chemistry of decay).  

Public performances and creative art projects showcased environmental messages (e.g., a drama on plastic’s impact).

Comparison of 2023 & 2024 Events
Category

2023: #BeatPlasticPollution

2024: #GenerationRestoration

Focus

Reducing plastic waste

Land restoration & desertification

Art Projects

Agamograph Art (dual images)

Thread Art (colorful depictions)

Performances

Drama, Music, Dance

Theatrical & Musical Performance

Major Hands-on Learning

Recycling & Plastic Upcycling

Waste Sorting & Restoration Models

Community Activity

Swoyambhunath Stupa Cleaning

Swoyambhunath Stupa Cleaning

Scientific Models

National Park Conservation

Desertification & Restoration Models

Key Takeaways
Holistic Learning Approach: The Excelsior School integrates science, art, and social responsibility into its Environment Day celebrations (e.g., chemistry in recycling, art in thread designs).  

Community Involvement: Activities like stupa cleaning and waste management extend beyond the school, showing science’s societal impact.  

Progressive Themes: The school follows the UN Environment Program themes each year, aligning with global sustainability goals (e.g., pollution in 2023, restoration in 2024).  

Hands-on Activities: Students engage in practical tasks (waste sorting, recycling, land restoration) to reinforce environmental concepts (e.g., biology of decomposition).

7.3 The Excelsior School – Intraschool Science Olympiad Overview
What is the Science Olympiad?
The Science Olympiad is a STEAM-based competition (Science, Technology, Engineering, Arts, Mathematics) where students compete in different scientific disciplines, including Physics, Chemistry, Biology, Astronomy, and Design. As a science teacher, you play a key role in preparing students and possibly designing challenges. The competition is divided into two main categories:  
1. Study Round:  
A theoretical competition with MCQ (Multiple Choice Questions) and subjective questions based on various science topics (e.g., “What’s the primary source of Earth’s energy?” or “Explain photosynthesis”).

2. Build Round:  
A hands-on challenge where students design and construct structures for specific tasks. Examples:  
Catapult Challenge: Build a catapult to launch objects (e.g., a small ball) a set distance.  

Bridge Strength Challenge: Create a bridge with minimal mass that can support maximum weight (e.g., holding books).  

Musical Instrument Challenge: Construct and perform using a self-made instrument (e.g., a straw flute).

Learning Outcomes
The Olympiad helps students develop key skills and competencies, which you can reinforce in your teaching:  
 Conceptual Understanding – Encourages deep learning through research-based activities (e.g., studying force for the catapult).  

 Analytical & Problem-Solving Skills – Enhances students’ ability to analyze and solve challenges (e.g., tweaking a bridge design).  

 Improved Academic Performance – Strengthens critical thinking, leading to better grades (e.g., applying Olympiad physics to exams).  

 Boosted Self-Confidence – Helps students become comfortable in competitive settings (e.g., presenting their build).  

 Teamwork & Collaboration – Encourages teamwork, communication, and collective problem-solving (e.g., group planning for a challenge).

Competition Structure
Day

Category

Time

Task

Participation

Points

Day 1

Study Round

20 min

MCQ Test (20 Qs, 1 mark each)

Individual

30

60 min

Subjective Questions (5 Qs, 4 marks each)

Team

25

Day 2

Build Round

60 min

Design, Build & Execution

Team

20

Total Points

75

Participant Selection Process
Online Registration – Students register with their House teachers (e.g., Red House, Blue House).  

MCQ Round – 48 students (12 per house) qualify for the next round based on scores.  

Subjective Round – Each house randomly forms 3 teams (total 12 teams) to answer detailed questions.  

Build Round – The best team from each house competes (4 teams in total) in the hands-on challenge.  

Awards – Gold, Silver, and Bronze medals + certificates for the winners; the 4th team receives certificates only.

Who Organizes the Olympiad?
The grade teachers and instructional supervisor create the questions and challenges (e.g., you might design a chemistry MCQ or a physics build task).  

The event is open to all levels (juniors, intermediates, and seniors), ensuring broad participation.

Key Takeaways
 A fun, competitive, and engaging way for students to apply science concepts (e.g., physics in catapults).  

 Encourages critical thinking, teamwork, and creativity (e.g., designing under constraints).  

 Promotes both theoretical knowledge and hands-on problem-solving, aligning with your teaching goals.  

The Science Olympiad at The Excelsior School is a platform for young scientists to showcase their skills and develop a passion for innovation! 

7.4 Candle Making Activity – Tihar Festival (Grade 7)
Overview
The Candle Making Activity is an interactive, hands-on learning experience designed for Grade 7 students at The Excelsior School, conducted during the Tihar festival (a major Nepali holiday celebrating light and prosperity). This activity provides students with the opportunity to craft decorative candles using wax, colors, and molds, fostering both creativity and practical skills, with you guiding the science behind it.  
Beyond the creative aspect, the initiative also incorporates entrepreneurial learning. The candles produced by the students are sold during Grade 5 Parents’ Day to parents and the school community. This allows students to experience the fundamentals of entrepreneurship, including production (making candles), marketing (promoting their work), and financial literacy (handling sales and profits), blending science with real-world skills.

Materials Required
S.N

Materials

Quantity

1

Wax

15 kg (enough for multiple batches)

2

Thread (for wicks)

10 m (cut into pieces for each candle)

3

Candle Colors

5-6 packets (variety for decoration)

4

Heating Stove

1 (for melting wax)

5

Ladle (डाडु)

2 (for pouring wax)

6

Metal Cup

2 (for melting smaller amounts)

7

Gas Cylinder

1 (fuel for the stove)

8

Candle Moulds (सांचो)

Small-2, Medium-2, Large-2 (variety of sizes)

9

Thick Plastic Sheet (त्रिपाल)

1 (to protect surfaces from spills)

Key Learning Outcomes
Hands-on Craftsmanship:  
Students gain practical experience in wax melting (understanding melting points), color mixing (exploring pigment dispersion), and molding techniques (shaping liquids into solids), enhancing their technical skills and creativity in a science context.

Entrepreneurial Mindset:  
Through selling their handmade candles, students develop an understanding of business fundamentals, including pricing (e.g., setting a fair cost), customer interaction (e.g., explaining their product), and financial transactions (e.g., calculating profit), nurturing responsibility and financial awareness.

Festival and Cultural Connection:  
By creating decorative candles for Tihar, students engage with cultural traditions (e.g., lighting candles for Lakshmi), reinforcing the importance of craftsmanship and sustainability in celebrations (e.g., reusable molds vs. disposables).

Teamwork and Collaboration:  
The activity promotes team-based learning, where students work together in production (e.g., melting wax), packaging (e.g., wrapping candles), and sales (e.g., running a stall), fostering collaborative and communication skills applicable to lab work.

Conclusion
The Candle Making Activity seamlessly integrates science (e.g., states of matter), creativity (e.g., designing unique candles), culture (e.g., Tihar traditions), and entrepreneurship (e.g., selling products), offering students a practical and meaningful learning experience. Through this initiative, students not only develop craftsmanship skills but also gain firsthand experience in small-scale business operations, preparing them for real-world financial and entrepreneurial challenges in the future, all under your scientific guidance.  

7.5 Pi Day Celebrations at The Excelsior School
What is Pi Day?
Pi Day, celebrated annually on March 14 (3.14), honors the mathematical constant π (pi), which represents the ratio of a circle’s circumference to its diameter (approximately 3.14159). This day not only highlights the beauty of mathematics but also fosters creativity, problem-solving, and critical thinking through engaging STEAM-based activities, making it a perfect science-math crossover event for you to lead or support.  
Pi Day 2023 Activities
Grade-wise Events & Challenges:  
Pi Day 2023 Activities (Continued)
Grade-wise Events & Challenges (Continued):  
Grade

Activity

Description

Participation

Materials Used

Prizes

Facilitator

6

Straw Tower Design Challenge

Design a straw tower that can hold a cricket ball for 3 seconds, testing structural engineering and physics concepts like balance and load distribution.

Group of 6

25 straws, masking tape, scissors

Choco Pie for all team members

Sobit Pradhan

7

Pi-Themed Treasure Hunt

Navigate through school using Pi-based clues (e.g., “Walk 3.14 meters north”) to find a hidden prize, blending math with problem-solving.

Group of 6

Hints, clues, periodic table

Choco Pie for all team members

Sahana Malakar

8

Pi-Themed Physics Numerical Challenge

Solve 7 Pi-related physics problems in 22 minutes (e.g., calculating circular motion or pendulum periods using π), emphasizing quick application of concepts.

Individual

Numerical worksheet

Choco Pie (Top 3), Candy (Top 10)

Sachita Bajracharya

Key Highlights (2023):  
Interdisciplinary Learning: Activities combined math (π calculations), science (physics principles), and creativity (tower design), aligning with your STEAM focus as a science teacher.  

Engagement: Competitive yet fun tasks (e.g., treasure hunt) kept students motivated, encouraging active participation across grades.  

Practical Application: Challenges like the straw tower linked theoretical concepts (e.g., force and stability) to hands-on construction, mirroring lab-based learning.

Pi Day 2024 Activities
Overview:  
Pi Day 2024 expanded into a three-day celebration from March 13 to March 15, offering a mix of art, math, and science activities to deepen students’ appreciation of π.

Detailed Plan:  
Date

Activity

Description

Grade

March 13

Poster-Making Competition

Create artistic posters themed around π (e.g., circular designs with 3.14), blending creativity with math awareness.

6-8

March 14

Pi Day Hunt

A school-wide treasure hunt with Pi-related clues (e.g., “Measure this circle’s circumference”), fostering teamwork and problem-solving.

6-8

March 15

Challenge Day

Grade-specific STEAM challenges (e.g., Grade 6: straw towers; Grade 7: Pi quizzes; Grade 8: physics problems), testing diverse skills.

6-8

Key Highlights (2024):  
Extended Celebration: The three-day format allowed broader participation and varied activities, enhancing engagement over a single day.  

Art-Science Fusion: Poster-making connected artistic expression to mathematical precision, appealing to diverse learners.  

Collaborative Fun: The hunt and challenges encouraged group dynamics, similar to lab group cooperation you’d oversee.

Pi Day 2025 Activities
Overview:  
Planned for March 14, 2025, Pi Day 2025 introduces a digital learning focus alongside traditional activities, leveraging technology to explore π’s significance, aligning with your ICT competency as a science teacher.

Tentative Plan:  
Activity

Description

Grade

Audiobook Listening

Listen to an audiobook on the history of π (e.g., its discovery by Archimedes), sparking curiosity about its origins.

6-8

Video Documentary

Watch a documentary on π’s applications (e.g., in engineering or astronomy), connecting math to real-world science.

6-8

Pi Bingo

Play a bingo game with Pi-related numbers and facts (e.g., 3.14, circumference formulas), making learning playful.

6-8

Key Highlights (2025):  
Tech Integration: Digital tools like audiobooks and videos modernize the celebration, reflecting your role in using ICT for science education.  

Interactive Learning: Bingo gamifies math facts, keeping students engaged in a low-pressure setting.  

Future-Oriented: Prepares students for tech-driven learning environments, a skill you can reinforce in science lessons.

Key Takeaways Across Years
Evolution of Celebration: From a single-day event in 2023 to a three-day fest in 2024, and a tech-infused plan for 2025, Pi Day grows in scope and innovation, offering you diverse ways to integrate science and math.  

STEAM Focus: Activities consistently blend science (e.g., physics challenges), technology (e.g., documentaries), engineering (e.g., towers), arts (e.g., posters), and math (e.g., π calculations), aligning with your interdisciplinary teaching goals.  

Student Benefits: Enhances problem-solving, creativity, and collaboration—skills you nurture in lab settings—while making abstract concepts tangible and fun.



